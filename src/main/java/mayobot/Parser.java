package mayobot;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import mayobot.commands.ByeCommand;
import mayobot.commands.Command;
import mayobot.commands.DeadlineCommand;
import mayobot.commands.DeleteCommand;
import mayobot.commands.EventCommand;
import mayobot.commands.FindCommand;
import mayobot.commands.ListCommand;
import mayobot.commands.MarkCommand;
import mayobot.commands.TodoCommand;
import mayobot.commands.UnknownCommand;
import mayobot.commands.UnmarkCommand;
import mayobot.task.DeadlineTask;
import mayobot.task.EventTask;
import mayobot.task.Task;
import mayobot.task.TodoTask;

/**
 * Utility class for parsing user input and file data into Command and Task objects.
 * Provides static methods to convert string inputs into structured data that the application can process.
 * <p>
 * This class handles two main types of parsing:
 * - User command input parsing for interactive commands
 * - File data parsing for task persistence and loading
 */
public class Parser {
    /** Date and time formatter for parsing date strings in DD-MM-YYYY HH:mm format. */
    private static final DateTimeFormatter INPUT_FORMAT = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm");

    private static final int MIN_TASK_PARTS = 3;
    private static final int DEADLINE_PARTS = 4;
    private static final int EVENT_PARTS = 5;

    /**
     * Returns a Command object by parsing user input string containing the command type and arguments.
     * Splits the input on the first space to separate the command word from its arguments.
     * The first word becomes the command, and everything after the first space becomes the arguments.
     *
     * @param input the raw user input string to be parsed
     * @return a Command object containing the parsed command word and arguments string
     * @see Command
     */
    public static Command parse(String input) {
        String[] parts = input.split(" ", 2);
        String command = parts[0];
        String arguments = parts.length > 1 ? parts[1] : "";
        return constructCommand(command, arguments);
    }

    /**
     * Returns a Task object by parsing a task string from file storage format.
     * Supports parsing TodoTask, DeadlineTask, and EventTask from their stored format.
     * The expected format is: "TYPE | DONE_STATUS | DESCRIPTION [| DATETIME_FIELDS]"
     * where TYPE is T/D/E, DONE_STATUS is 0/1, and DATETIME_FIELDS vary by task type.
     * <p>
     * This method returns null if the input format is invalid or cannot be parsed.
     * Datetime parsing follows ISO format as generated by LocalDateTime.toString().
     *
     * @param input the task string in file storage format
     * @return the parsed Task object, or null if the input format is invalid
     * @see TodoTask
     * @see DeadlineTask
     * @see EventTask
     */
    public static Task parseTaskFromFile(String input) {
        String[] parts = validateAndSplitInput(input);
        if (parts == null) {
            return null;
        }

        String type = parts[0];
        boolean isDone = parseDoneStatus(parts[1]);
        String description = parts[2];

        Task task = createTaskByType(type, description, parts);
        if (task != null && isDone) {
            task.markAsDone();
        }
        return task;
    }

    private static Command constructCommand(String command, String arguments) {
        switch (command) {
        case "list":
            return new ListCommand(arguments);
        case "bye":
            return new ByeCommand(arguments);
        case "mark":
            return new MarkCommand(arguments);
        case "unmark":
            return new UnmarkCommand(arguments);
        case "delete":
            return new DeleteCommand(arguments);
        case "find":
            return new FindCommand(arguments);
        case "todo":
            return new TodoCommand(arguments);
        case "deadline":
            return new DeadlineCommand(arguments);
        case "event":
            return new EventCommand(arguments);
        default:
            return new UnknownCommand(command, arguments);
        }
    }

    private static String[] validateAndSplitInput(String input) {
        String[] parts = input.split(" \\| ");
        return parts.length >= MIN_TASK_PARTS ? parts : null;
    }

    private static boolean parseDoneStatus(String status) {
        return "1".equals(status);
    }

    private static Task createTaskByType(String type, String description, String[] parts) {
        switch (type) {
        case "T":
            return new TodoTask(description);
        case "D":
            return createDeadlineTask(description, parts);
        case "E":
            return createEventTask(description, parts);
        default:
            return null;
        }
    }

    private static Task createDeadlineTask(String description, String[] parts) {
        if (parts.length < DEADLINE_PARTS) {
            return null;
        }
        try {
            LocalDateTime by = LocalDateTime.parse(parts[3]);
            return new DeadlineTask(description, by);
        } catch (Exception e) {
            return null;
        }
    }

    private static Task createEventTask(String description, String[] parts) {
        if (parts.length < EVENT_PARTS) {
            return null;
        }
        try {
            LocalDateTime from = LocalDateTime.parse(parts[3]);
            LocalDateTime to = LocalDateTime.parse(parts[4]);
            return new EventTask(description, from, to);
        } catch (Exception e) {
            return null;
        }
    }
}
